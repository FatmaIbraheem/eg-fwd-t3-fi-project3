version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name hatem-udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_id:
          type: string
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl https://kvdb.io/FSEfNb8pmLiuvp867pkneM/migration_<< parameters.workflow_id >>)
              if [ $SUCCESS -eq 1 ];
              then
              cd backend
              npm run migrations:revert
              fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm fund
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
      - slack/notify:
          event: fail
          mentions: '@Fatma Ibraheem'
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command:  |
            yum -y install tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople 
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text )
            echo "BACKEND_IP=${BACKEND_IP}"
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
          - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["40:7f:36:9e:b2:ab:0e:aa:e4:2c:e4:13:ff:11:6c:ff"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "FSEfNb8pmLiuvp867pkneM" in your local terminal first
              curl --insecure https://kvdb.io/FSEfNb8pmLiuvp867pkneM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-frontend:
    docker:
      # AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --update tar gzip curl
            pip3 install awscli
            curl -fsSL https://deb.nodesource.com/setup_14.x
            apk add --update nodejs npm
            node --version
            npm --version
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt install openssh-server openssh-client
      - run:
          name: Install Ansible latest
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            sudo apt install ansible -y
      - run:
          name: Install Node.js 
          command: |
            sudo apt update
            sudo apt install nodejs npm
            node --version 
      
      - add_ssh_keys:
          fingerprints: ["40:7f:36:9e:b2:ab:0e:aa:e4:2c:e4:13:ff:11:6c:ff"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: clean old workflow
            command: |
              WorkflowID=$(aws --region us-east-1 cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              curl https://kvdb.io/FSEfNb8pmLiuvp867pkneM/values/workflowid  -d "$WorkflowID"
        - run:
            name: Update cloudfront 
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              OldWorkflowID=$(curl https://kvdb.io/FSEfNb8pmLiuvp867pkneM/values/workflowid)
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
              if [[ $OldWorkflowID == "" ]]
              then
              echo "No workflow id found"
              else
              if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
              then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              fi
              fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify: 
          requires: [scan-frontend]
          context: slack
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
